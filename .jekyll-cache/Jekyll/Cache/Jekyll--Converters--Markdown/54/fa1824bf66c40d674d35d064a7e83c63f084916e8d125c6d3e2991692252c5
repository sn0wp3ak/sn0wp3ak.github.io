I"#<h3 id="输入输出重定向">输入输出重定向</h3>
<p>|                | 文件描述符 |   默认    |
| :————: | :——–: | :——-: |
| 标准输入重定向 |     0      | 键盘/文件 |
| 标准输出重定向 |     1      |   屏幕    |
| 错误输出重定向 |     2      |   屏幕    |
<strong>输入重定向</strong></p>
<ul>
  <li>命令 &lt; 文件   把文件当作命令的标准输入</li>
  <li>命令 « 分界符   从标准输入中读入, 直到碰见分界符停止</li>
  <li>命令 &lt; 文件A &gt; 文件B   将文件A作为命令的标准输入并把标准输出到文件B</li>
  <li>文件描述符 &lt;&amp; 文件描述符  从文件描述符中输入重定向到另一个文件描述符 (举例: 1 &lt;&amp; 100)</li>
</ul>

<p><strong>输出重定向</strong></p>
<ul>
  <li>&gt; 覆盖式</li>
  <li>&gt;&gt; 追加式</li>
  <li>命令 2» 文件   输出默认是标准输出, 想操作错误输出需要在命令后面加上描述符2</li>
  <li>命令 &amp;» 文件   把标准和错误输出同时重定向到文件中</li>
  <li>文件描述符 &gt;&amp; 文件描述符  输出重定向到另一个文件描述符(举例: 1 &gt;&amp; 101)
    <h3 id="管道符号">管道符号</h3>
  </li>
  <li>命令A|命令B  把命令A的标准输出作为命令B的标准输入, 而不是直接输出在屏幕上
    <h3 id="通配符">通配符</h3>
  </li>
  <li>*号–所有</li>
  <li>?号–1个
    <h3 id="转义符号">转义符号</h3>
  </li>
  <li>反斜杠\        后面的变量转义成纯字符</li>
  <li>单引号’’       把其中所有变量转义成纯字符</li>
  <li>双引号””       保留其中的变量属性, 不转义</li>
  <li>反引号``       把其中的命令执行后返回结果(只需要命令执行后的结果)</li>
</ul>
:ET