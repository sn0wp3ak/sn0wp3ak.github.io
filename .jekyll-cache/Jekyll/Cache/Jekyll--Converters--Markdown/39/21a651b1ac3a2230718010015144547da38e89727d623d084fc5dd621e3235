I"V <p><strong>集合</strong></p>

<p><code class="language-plaintext highlighter-rouge">set = {item1, item2, ...}</code></p>

<p>创建一个空集合:</p>
<ol>
  <li>em_set = set() # 只有这一种方式, {}已经被用作创建空字典!</li>
</ol>

<p>集合这种容器, 貌似是5大容器中最没有存在感, 也确实是用的最少的一种;<br />
但是, 它的作用却很重要!<br /></p>

<p>集合和字典一样, 都属于无序的数据类型!<br /></p>

<p>集合的特点 (重要)</p>
<ul>
  <li>集合中不存在重复的元素</li>
  <li>那么, 集合的其中一个很重要的作用就是<strong>去重</strong>了!</li>
</ul>

<p>可变和不可变特性</p>
<ul>
  <li>集合本身是可变的, 也就是说集合中的元素可以被删除, 同时也可以往集合中添加新的元素</li>
  <li>但是集合中的元素必须是不可变的, 也就是集合中的元素不能是列表和字典以及特殊的元组</li>
  <li>至于修改元素, 这个功能对于集合来说不太适用, 因为集合中的元素既没有下标, 也没有像是字典那样的元素唯一标识(key), 也正是因为如此, 集合才会强制要求其中的元素是不可变的</li>
</ul>

<p>解释一下什么叫特殊的元组, 元组本身不可变对吧, 看似很符合作为集合中元素的条件;<br />
但是如果元组中有一个列表呢? 比如: <code class="language-plaintext highlighter-rouge">my_set = {1, 2, "hello", (3, 4, [5, 6])}</code><br />
这种情况下, 虽然(3, 4, [5, 6])本身不可变, 但是[5, 6]这个列表是能变的, 比如变成[7, 8];<br />
所以定义这样的非法集合是会报错的! <br /></p>

<p>集合的添加</p>
<ol>
  <li>set.add()</li>
  <li>set.update()
    <ul>
      <li>update这个方法的参数可以是可变对象, 它会把可变对象中的不可变元素提取出来</li>
      <li>update添加的元素一定是最原子性的不可变对象 (拆到不能再拆)</li>
    </ul>
  </li>
</ol>

<p>集合的删除</p>
<ol>
  <li>set.remove()
    <ul>
      <li>元素不存在, 直接报错</li>
    </ul>
  </li>
  <li>set.discard()
    <ul>
      <li>元素不存在, 不会报错</li>
    </ul>
  </li>
  <li>set.pop()
    <ul>
      <li>随机删除一个元素, 并把它返回出来</li>
    </ul>
  </li>
</ol>

<p>集合的大小</p>

<ul>
  <li>len(set)</li>
</ul>

<p>清空集合</p>

<ul>
  <li>set.clear()</li>
</ul>

<p>是否存在某个元素</p>

<ul>
  <li>item in/not in set</li>
</ul>

<p><strong>集合不需要也不能单独查某个元素</strong>
<strong>集合不需要count函数去统计出现次数因为集合中的元素只能出现1次</strong></p>

<p><strong>集合推导式</strong></p>

<p><code class="language-plaintext highlighter-rouge">aset = {x for x in 可迭代对象 if 条件}</code></p>

<p>集合的常用方法</p>

<ol>
  <li>减法算数运算 (集合独占)</li>
</ol>

<p>相当于求补集</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
<span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
<span class="n">cset</span> <span class="o">=</span> <span class="n">aset</span> <span class="o">-</span> <span class="n">bset</span>
<span class="k">print</span><span class="p">(</span><span class="n">cset</span><span class="p">)</span>
</code></pre></div></div>
<p>结果</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{1, 3, 5}
</code></pre></div></div>

<ol>
  <li>集合运算 (类似于数学中集合的运算)
    <ul>
      <li>取并集 | (包含于集合a的所有元素 + 包含于集合b的所有元素)
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>
<span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">}</span>
<span class="n">cset</span> <span class="o">=</span> <span class="n">aset</span> <span class="o">|</span> <span class="n">bset</span>
<span class="k">print</span><span class="p">(</span><span class="n">cset</span><span class="p">)</span>
</code></pre></div>        </div>
        <p>结果<br /></p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{1, 2, 3, 4, 5, 6}
</code></pre></div>        </div>
      </li>
      <li>取交集 &amp; (包含于集合a, 且同时包含于集合b)
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
<span class="n">cset</span> <span class="o">=</span> <span class="n">aset</span> <span class="o">&amp;</span> <span class="n">bset</span>
<span class="k">print</span><span class="p">(</span><span class="n">cset</span><span class="p">)</span>
</code></pre></div>        </div>
        <p>结果<br /></p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{1, 2}
</code></pre></div>        </div>
      </li>
      <li>补集的并集 ^ (不同时包含于集合a和集合b的元素)</li>
    </ul>
  </li>
</ol>

<p>首先理解一下补集是啥?<br /></p>

<p>补集 –&gt; 补充用的集合<br />
谁对谁补充, 需要2个对象!<br />
比如: <br /></p>
<ul>
  <li>A对B的补集, 就是B里没有但是A里有的元素组成的补充集合, 用A去补充B所需要的A中的部分元素</li>
  <li>B对A的补集, 就是A里没有但是B里有的元素组成的补充集合, 用B去补充A所需要的B中的部分元素</li>
</ul>

<p>那么, 补集的并集就是 A对B的补充加上B对A的补充, 注意仅是补充的部分!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
<span class="n">bset</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">10</span><span class="p">}</span>
<span class="n">cset</span> <span class="o">=</span> <span class="n">aset</span> <span class="o">^</span> <span class="n">bset</span>
<span class="k">print</span><span class="p">(</span><span class="n">cset</span><span class="p">)</span>
</code></pre></div></div>
<p>结果<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{1, 3, 5, 6, 8, 10}
# A对B的补集 {1, 3, 5}
# B对A的补集{6, 8, 10}
</code></pre></div></div>
:ET