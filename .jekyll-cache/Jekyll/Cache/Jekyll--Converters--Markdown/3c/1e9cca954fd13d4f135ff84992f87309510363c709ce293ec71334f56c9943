I"<p>面向对象的三大特性: 封装, 继承, 多态<br /></p>

<p>类: 具有相同属性和行为的一组事物(对象)的统称<br /></p>
<ul>
  <li>属性: 特点, 特征</li>
  <li>行为: 能干什么, 作出什么动作</li>
  <li>对象: 具体存在的一个事物</li>
</ul>

<p>对象是由类所创建的, 类可以用来实例化对象<br /></p>

<h3 id="类的构成三要素">类的构成三要素:</h3>
<ol>
  <li>类名</li>
  <li>属性</li>
  <li>方法</li>
</ol>

<p>怎么抽象出一个类:</p>
<ol>
  <li>名词提炼</li>
  <li>所见即所得</li>
</ol>

<h3 id="定义类">定义类:</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">类名</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>
</code></pre></div></div>
<ul>
  <li>object是所有类的父类</li>
  <li>类名必须遵循标识符命名规则, 且推荐<code class="language-plaintext highlighter-rouge">大驼峰MyClass</code>的形式</li>
</ul>

<h3 id="新式类和旧式类经典类的区别">新式类和旧式类(经典类)的区别:</h3>
<ol>
  <li>新式类直接或者间接继承自object类 (Python3中默认)</li>
  <li>旧式类没有从object继承 (Python2默认)</li>
</ol>

<h3 id="创建对象">创建对象:</h3>
<ul>
  <li>对象是由类创建的, 必须要先定义类</li>
  <li>一个类可以创建多个对象</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">对象名</span> <span class="o">=</span> <span class="n">类名</span><span class="p">()</span>
</code></pre></div></div>

<ul>
  <li>在类当中定义的函数, 称为方法</li>
  <li>调用方法: <code class="language-plaintext highlighter-rouge">对象名.方法名()</code></li>
</ul>

<h3 id="在类的外部添加和获取属性">在类的外部添加和获取属性:</h3>
<ul>
  <li>添加 <code class="language-plaintext highlighter-rouge">对象名.属性 = 值</code></li>
  <li>获取 <code class="language-plaintext highlighter-rouge">对象名.属性</code></li>
</ul>

<p>每一个对象都有属于自己的内存空间, 其属性也是自己的, 不会相互影响<br /></p>

<h3 id="self">self</h3>
<ul>
  <li>self只是个形式参数,  也可以使用其他名字替代self, 但是一般都使用self</li>
  <li>self就代表对象本身, 谁调用的就是谁</li>
  <li>self参数不需要手动传递, python解释器会在执行代码时自动传递</li>
  <li>在类的内部, 就能使用self来添加和获取对象的属性</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 添加
</span><span class="bp">self</span><span class="p">.</span><span class="n">属性</span> <span class="o">=</span> <span class="n">值</span>
<span class="c1"># 获取
</span><span class="bp">self</span><span class="p">.</span><span class="n">属性</span>
</code></pre></div></div>

:ET