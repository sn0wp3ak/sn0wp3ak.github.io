I"=<p><strong>用户身份:</strong><br /></p>
<ol>
  <li>管理员 administrator (root)</li>
  <li>系统用户 system</li>
  <li>普通用户 <br /></li>
</ol>

<p>管理员 != 名字叫root<br />
管理员 == <code class="language-plaintext highlighter-rouge">'UID=0'</code><br /></p>

<p>UID是Linux系统中用户身份的<strong>唯一标识</strong>(不可重复)<br />
UID=0才是判断该用户为管理员的依据!<br /></p>

<p><strong>UID的范围</strong><br /></p>
<blockquote>
  <ol>
    <li>root用户 UID=<code class="language-plaintext highlighter-rouge">0</code>;<br /></li>
    <li>系统用户 UID=<code class="language-plaintext highlighter-rouge">1~999</code>;<br /></li>
    <li>普通用户 UID=<code class="language-plaintext highlighter-rouge">1000~...</code>;<br /></li>
  </ol>
</blockquote>

<p>在有些版本比较早的Linux系统中系统用户和普通用户的分界线是500而不是1000, 不过普通用户的UID从500还是1000开始并不是特别重要, 系统在创建新用户时会自动推移, 如果非要指定用户的UID, 建议还是从1000往后取;<br /></p>

<p><strong>与用户有关的2个重要文件</strong>: <br /></p>

<blockquote>
  <ol>
    <li>/etc/passwd : UID和GID等用户重要参数;<br /></li>
    <li>/etc/shadow : 密码相关的数据;<br /></li>
  </ol>
</blockquote>

<p><strong>/etc/passwd的文件结构:</strong><br /></p>

<blockquote>
  <ol>
    <li>用户名;<br /></li>
    <li>密码占位符 x (<code class="language-plaintext highlighter-rouge">/etc/shadow</code>); <br /></li>
    <li>UID | 用户ID;<br /></li>
    <li>GID | 组ID (<code class="language-plaintext highlighter-rouge">/etc/group</code>); <br /></li>
    <li>用户说明 | 对用户账户的用途和意义的简单描述;<br /></li>
    <li>家目录 | 用户的主要工作目录;<br /></li>
    <li>终端解释器 | 用户的shell;<br /></li>
  </ol>
</blockquote>

<p><strong>/etc/shadow的文件结构:</strong><br /></p>

<blockquote>
  <ol>
    <li>用户名;<br /></li>
    <li>加密过的密码;<br /></li>
    <li>最近一次更新密码的日期 | 时间戳的形式;<br /></li>
    <li>密码不能重新更改的天数 | 0 则可以随便改动;<br /></li>
    <li>密码必须重新改动的天数 | 99999 则永远不会强制更改;<br /></li>
    <li>密码需要到期更改的提前警告天数;<br /></li>
    <li>密码过期之后的宽限天数 | 密码过期后几天之内还是可以登录, 但是会强制修改密码;<br /></li>
    <li>密码失效日期 | 超过此日期(时间戳)后, 你的帐号就再也无法登录使用了;<br /></li>
    <li>保留字段;<br /></li>
  </ol>
</blockquote>

<p><strong>与组有关的2个重要文件:</strong><br /></p>

<blockquote>
  <ol>
    <li>/etc/group : GID与组名的对应关系;<br /></li>
    <li>/etc/gshadow : 组密码;<br /></li>
  </ol>
</blockquote>

<p><strong>/etc/group的文件结构:</strong><br /></p>

<blockquote>
  <ol>
    <li>组名;<br /></li>
    <li>组密码占位符 x ;<br /></li>
    <li>GID;<br /></li>
    <li>在这个组里的所有用户(用,分隔);<br />
初始组的第4个字段不需要添加用户, 一般留空;<br /></li>
  </ol>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">passwd, shadow, group 文件的相关性:</code><br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/etc/passwd 密码占位x --&gt; /etc/shadow 中的真实密码(加密的);
/etc/passwd GID --&gt; /etc/group 中的组名;
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">当一个用户已经加入了多个组时, 他的权限到底以哪个组为基准呢?</code><br />
假设user用户加入了A组同时也加入了B组, 那么对于<strong>已经存在</strong>的文件而言, user同时拥有了A,B两个组的权限;<br />
A,B两个用户组中的用户<strong>过去创建</strong>的文件, 他都能根据组权限去做相关操作;<br />
但是如果user用户<strong>创建一个新文件</strong>呢?文件的<strong>所属组权限</strong>的rwx该以A组还是B组为准呢? – 以<code class="language-plaintext highlighter-rouge">有效组</code>为准<br /></p>

<blockquote>
  <p>初始组: 在用户登录后, 立即就拥有该组的所有权限; (一般是用户同名的那个组)<br />
有效组: 用户在创建新文件时, 以该组作为所属组;<br /></p>
</blockquote>

<p>查看当前用户加入的所有组: <code class="language-plaintext highlighter-rouge">groups</code> 命令;<br />
groups 命令列出的第一个组就是该用户当前的有效组;<br /></p>

<p><strong>切换有效组</strong><br />
只能在用户已经加入的组中切换;<br />
命令: <code class="language-plaintext highlighter-rouge">newgrp 目标组名</code>;<br />
这个操作的本质是为用户打开了一个新的shell, 在这个shell中有效组变更了, 所以切换有效组并不会影响环境变量, exit就能退回到初始的shell;<br /></p>

<p><strong>用户加入一个组的方法:</strong><br /></p>

<blockquote>
  <ol>
    <li>root用户用 usermod 命令帮用户加入到指定组;<br /></li>
    <li><code class="language-plaintext highlighter-rouge">组管理员</code>用 gpasswd 命令帮助用户加入到指定组;<br /></li>
  </ol>
</blockquote>

<p><strong>/etc/gshadow的文件结构:</strong><br /></p>

<blockquote>
  <ol>
    <li>组名;<br /></li>
    <li>组密码 | 如果以!开头, 说明这个组还没有组管理员;<br /></li>
    <li>组管理员的UID;<br /></li>
    <li>已经加入该组的用户名 | 用,分隔;<br /></li>
  </ol>
</blockquote>
:ET