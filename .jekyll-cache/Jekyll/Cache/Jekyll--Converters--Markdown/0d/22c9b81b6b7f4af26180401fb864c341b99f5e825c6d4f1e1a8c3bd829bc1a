I"Q<p>函数: 一段功能代码的封装(函数就是代码的封装)<br /></p>

<p>好处: 复用, 减少代码的冗余<br /></p>

<p>定义函数:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">函数名</span><span class="p">(</span><span class="n">形参</span><span class="p">):</span>
    <span class="n">函数体</span>
</code></pre></div></div>

<ul>
  <li>定义函数时, 并不会执行函数中的代码</li>
  <li>函数名需要符合标识符命名规则</li>
</ul>

<p>调用函数:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">函数名</span><span class="p">(</span><span class="n">实参</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>函数调用的时候才会执行函数体中的代码</li>
  <li>函数必须先定义后调用, 被调用的函数必须在上文中定义过</li>
</ul>

<p>错误示例:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">agv1</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="c1"># 先调用
</span>    <span class="k">return</span> <span class="n">sum1</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
<span class="k">print</span><span class="p">(</span><span class="n">agv1</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
<span class="c1"># 后定义
</span><span class="k">def</span> <span class="nf">sum1</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div>

:ET