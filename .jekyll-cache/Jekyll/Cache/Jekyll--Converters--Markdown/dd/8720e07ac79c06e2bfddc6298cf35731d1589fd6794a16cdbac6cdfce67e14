I"l<p><strong>列表</strong></p>

<p><code class="language-plaintext highlighter-rouge">list = [item1, item2, ...]</code></p>
<ul>
  <li>
    <p>如何定义空列表</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. em_list = list()
2. em_list = []
</code></pre></div>    </div>
  </li>
  <li>
    <p>如何遍历一个列表
```python</p>
    <h1 id="for循环">for循环</h1>
    <p>for i in alist:
    print(i)</p>
  </li>
</ul>

<h1 id="while循环">while循环</h1>
<p>i = 0
while i &lt; len(alist):
      print(alist[i])
      i += 1
```</p>

<p><strong>和字符串一样, 列表既支持下标/索引, 同时也支持切片</strong></p>

<p>从 增删改查 4个角度梳理列表常用的操作方法</p>

<p>修改元素</p>

<ul>
  <li>列表名[下标] = 新的元素值</li>
</ul>

<p>添加元素</p>

<ol>
  <li>列表名.append(元素值)
    <ul>
      <li>追加到列表的尾部</li>
    </ul>
  </li>
  <li>列表名.insert(index, 元素值)
    <ul>
      <li>可以在列表的任意位置插入</li>
      <li>index代表要插入的下标位置</li>
    </ul>
  </li>
  <li>列表名.extend(可迭代对象)
    <ul>
      <li>把可迭代对象遍历出来后, 一个一个放在列表尾部</li>
    </ul>
  </li>
</ol>

<p><strong>append, insert, extend 这些函数都会直接操作原列表, 而且函数的返回值为 None</strong></p>

<p>查找元素</p>

<p>和字符串不同, 列表不存在find方法 (字符串独占)</p>

<ol>
  <li>列表名.index(元素值)
    <ul>
      <li>返回元素所在位置的下标</li>
    </ul>
  </li>
  <li>列表名.count(元素值)
    <ul>
      <li>统计同一个元素出现的总次数, 返回出现次数</li>
    </ul>
  </li>
  <li>元素 in/not in 列表名
    <ul>
      <li>判断元素在不在列表中</li>
      <li>返回布尔值 True/False</li>
    </ul>
  </li>
</ol>

<p>删除元素</p>

<ol>
  <li>列表名.remove(元素)
    <ul>
      <li>根据元素值删除</li>
      <li>删除不存在的数据时, 会直接报错</li>
      <li>返回值 None</li>
    </ul>
  </li>
  <li>del 列表名[下标]
    <ul>
      <li>根据下标删除</li>
      <li>后边的元素会自动向前移动</li>
    </ul>
  </li>
  <li>列表名.pop(下标)
    <ul>
      <li>根据下标删除</li>
    </ul>
  </li>
  <li>列表名.pop()
    <ul>
      <li>默认删除列表最后一个元素</li>
      <li>会将被删除的元素返回出来</li>
      <li>需要从列表中取数据, 同时缩短列表的情况下使用</li>
    </ul>
  </li>
</ol>

<p><strong>remove, del, pop 这三种方法都是会直接操作原列表, remove返回None, pop返回被删除的元素值</strong></p>

<p>列表排序</p>

<ol>
  <li>直接操作原列表
    <ul>
      <li>升序排序 list.sort()</li>
      <li>降序排序 list.sort(reverse=True)</li>
    </ul>
  </li>
  <li>不修改原列表, 而是返回一个新列表
    <ul>
      <li>函数 sorted(list)</li>
    </ul>
  </li>
</ol>

<p>列表逆置(反转)</p>

<p>注意: 反转与大小排序无关, 只是单纯的倒过来</p>

<ol>
  <li>直接操作原列表
    <ul>
      <li>list.reverse()</li>
    </ul>
  </li>
  <li>不修改原列表, 而是返回一个新的列表
    <ul>
      <li>list[::-1] 用上了切片 步长 -1</li>
    </ul>
  </li>
</ol>

<p>列表嵌套</p>

<p>列表中有的的元素还是列表</p>

<p>嵌套的外层还是按照列表的正常操作去做, 而内层则需要双重下标才能访问的到</p>

<p>列表 list = […, alist, …] 的第i个元素是 alist</p>

<p>那么就需要用 list[i][j] 去访问 alist的第j个元素</p>
:ET