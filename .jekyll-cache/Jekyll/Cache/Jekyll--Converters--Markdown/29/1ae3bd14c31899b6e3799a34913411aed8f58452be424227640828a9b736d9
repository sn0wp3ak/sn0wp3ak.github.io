I"B<p>隔离级别<code class="language-plaintext highlighter-rouge">由低到高</code>:<br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>读未提交--&gt;读已提交--&gt;重复读--&gt;串行化
Read uncommitted 、Read committed 、Repeatable read 、Serializable
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">MySQL默认的隔离级别: 可重复读 repeatable read</code><br /></p>

<p>事务的并发问题<br /></p>

<ol>
  <li>脏读
    <ul>
      <li>事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li>
      <li>解决脏读 – 使用读已提交, 但是会产生不可重复读的问题</li>
    </ul>
  </li>
  <li>不可重复读
    <ul>
      <li>事务A多次读取同一数据，事务B在事务A多次读取的过程中, 对数据作了更新并提交, 导致事务A多次读取同一数据时, 结果不一致。</li>
      <li>解决不可重复读 – 使用可重复读</li>
    </ul>
  </li>
  <li>幻读
    <ul>
      <li>系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。</li>
      <li>即多次查询之后，结果集的个数不一致</li>
      <li>mysql的可重复读模式解决了幻读</li>
      <li>多版本并发控制（MVCC）（快照读/一致性读）普通的 select 就是快照读</li>
      <li>next-key 锁 （当前读） 1.记录锁（行锁）2.间隙锁</li>
    </ul>
  </li>
</ol>

<p>小结：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表<br /></p>

<p>注意: 隔离级别越高，越能保证数据的完整性和一致性，但是对并发性能的影响也越大。隔离级别越高,并发越低<br /></p>
:ET