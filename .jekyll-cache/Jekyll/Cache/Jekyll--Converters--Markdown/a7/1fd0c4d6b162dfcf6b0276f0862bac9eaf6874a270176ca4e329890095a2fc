I"8<p>浏览器脚本语言, 由浏览器解释执行, 让网页和用户交互, 增强用户体验<br /></p>

<p>前端开发3大块:<br />
1.HTML-网页结构-骨骼<br />
2.CSS-网页样式-皮肤<br />
3.JS-网页行为-肌肉<br /></p>

<p><code class="language-plaintext highlighter-rouge">引入方式</code><br />
1.行内式 - 主要用于事件 直接使用JS属性<br />
2.内嵌式 - <code class="language-plaintext highlighter-rouge">&lt;head&gt;&lt;/head&gt;</code>标签中的<code class="language-plaintext highlighter-rouge">&lt;script&gt;&lt;/script&gt;</code>标签<br />
3.外链式 - <code class="language-plaintext highlighter-rouge">&lt;script src=".js的路径"&gt;&lt;/script&gt;</code><br /></p>

<ul>
  <li>JS是弱类型语言, 不需要指定变量的类型, 但是需要关键字<code class="language-plaintext highlighter-rouge">var</code><br /></li>
  <li>一条JS语句应该以<code class="language-plaintext highlighter-rouge">;</code>结尾</li>
  <li>同时定义多个变量: <code class="language-plaintext highlighter-rouge">var 变量1=xxx, 变量2=xxx, 变量3=xxx;</code></li>
  <li>注释:
    <ul>
      <li>单行 <code class="language-plaintext highlighter-rouge">/</code></li>
      <li>多行 <code class="language-plaintext highlighter-rouge">/* */</code>
        <h4 id="js六种数据类型五基本一复杂">JS六种数据类型(五基本一复杂)</h4>
      </li>
      <li>5基本</li>
      <li>number 数字型(不区分int/float)</li>
      <li>string 字符串型</li>
      <li>boolean 布尔型(true/false)</li>
      <li>undefined 变量声明了,但是未初始化</li>
      <li>null 空对象 定义变量, 初始化为null</li>
      <li>1复杂</li>
      <li>object JS对象都属于object这个复杂类型
        <h4 id="变量命名规范">变量命名规范</h4>
        <ol>
          <li>区分大小写</li>
          <li>第一个字符必须是: 字符/_/$ (不能是数字)</li>
          <li>其他字符: 字母/数字/_/$</li>
          <li>匈牙利命名风格: 小写字母+大写首字母+小写其他字母<code class="language-plaintext highlighter-rouge">aUser</code><code class="language-plaintext highlighter-rouge">fnHandler</code></li>
        </ol>
      </li>
    </ul>
  </li>
</ul>

<p>使用匈牙利命名风格可以有效地区分整型和浮点型: 比如 <code class="language-plaintext highlighter-rouge">iNum</code> 和 <code class="language-plaintext highlighter-rouge">fNum</code><br /></p>

<h4 id="函数">函数</h4>
<ul>
  <li>函数定义
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">函数名</span><span class="p">(</span><span class="nx">形参</span><span class="p">){</span>
  <span class="nx">xxxxxx</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>函数调用: <code class="language-plaintext highlighter-rouge">函数名(实参);</code></li>
  <li>函数返回值: <code class="language-plaintext highlighter-rouge">return xxx;</code>
    <h4 id="变量的作用域">变量的作用域:</h4>
    <ul>
      <li>全局变量可以<code class="language-plaintext highlighter-rouge">直接</code>在局部访问和修改, 不需要声明</li>
      <li>局部变量<code class="language-plaintext highlighter-rouge">不能</code>在全局访问和修改</li>
    </ul>
  </li>
</ul>

<h4 id="条件语句">条件语句</h4>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nx">条件1</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">如果条件1成立执行的语句</span><span class="p">;</span>
<span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">条件2</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">如果条件2成立执行的语句</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
	<span class="nx">如果上述条件都不成立的时候</span><span class="p">,</span> <span class="nx">执行的语句</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<h4 id="逻辑运算符">逻辑运算符</h4>
<ul>
  <li><code class="language-plaintext highlighter-rouge">&amp;&amp;</code> 且</li>
  <li><code class="language-plaintext highlighter-rouge">||</code> 或</li>
  <li><code class="language-plaintext highlighter-rouge">!</code> 非</li>
</ul>

:ET