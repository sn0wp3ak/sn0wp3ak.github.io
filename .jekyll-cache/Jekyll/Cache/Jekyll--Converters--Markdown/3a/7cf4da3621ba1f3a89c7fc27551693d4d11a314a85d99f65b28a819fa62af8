I"8<h2 id="调试方法">调试方法</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">print()</code>打印有问题的变量<br />
简单 直接 粗暴 有效<br />
缺点: 需要删除, 不然运行结果也会包含很多垃圾信息<br /></li>
  <li>
    <p>断言<code class="language-plaintext highlighter-rouge">assert</code><br />
凡是print()的地方都可以使用assert来替代<br />
如果断言失败，assert语句本身就会抛出AssertionError<br />
缺点: 程序中如果到处充斥着assert，和print()相比也好不到哪去<br />
启动Python解释器时可以用-O参数来关闭assert, 关闭后assert就相当于pass<br />
<code class="language-plaintext highlighter-rouge">$ python -O err.py</code><br /></p>
  </li>
  <li>logging日志<br />
把print()替换为logging, 不会抛出错误，而且可以输出到文件<br />
使用logging.info()也可以直接输出一段文本。<br />
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">logging</span>
<span class="n">s</span> <span class="o">=</span> <span class="s">'0'</span>
<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'n = %d'</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="mi">10</span> <span class="o">/</span> <span class="n">n</span><span class="p">)</span>
</code></pre></div>    </div>
    <p>此时只有ZeroDivisionError，没有任何信息。<br />
在import logging之后添加一行配置<br /></p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logging</span><span class="p">.</span><span class="n">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">INFO</span><span class="p">)</span>
</code></pre></div>    </div>
    <p><code class="language-plaintext highlighter-rouge">$ python err.py</code><br /></p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO:root:n = 0
Traceback (most recent call last):
  File "err.py", line 8, in &lt;module&gt;
 print(10 / n)
ZeroDivisionError: division by zero
</code></pre></div>    </div>
    <p>logging的好处，它允许你指定记录信息的级别，<br />
有<code class="language-plaintext highlighter-rouge">debug，info，warning，error</code>等几个级别，当我们指定level=INFO时，logging.debug就不起作用了。<br />
同理，指定level=WARNING后，debug和info就不起作用了。<br />
这样一来，你可以放心地输出不同级别的信息，也不用删除，最后统一控制输出哪个级别的信息。<br />
logging的另一个好处是通过简单的配置，一条语句可以同时输出到不同的地方，比如console(控制台)和文件。<br /></p>
  </li>
  <li>pdb调试器<br />
让程序以单步方式运行，可以随时查看运行状态。<br />
<code class="language-plaintext highlighter-rouge">$ python -m pdb err.py</code><br />
pdb模式下:<br />
    <pre><code class="language-&gt;">l -- 查看完整代码
n -- 单步执行代码
p 变量名 -- 查看变量
c -- 继续执行
q -- 结束调试
</code></pre>
    <p><code class="language-plaintext highlighter-rouge">pdb.set_trace()</code><br />
不需要单步执行, 在可能出错的地方放一个pdb.set_trace()，就可以设置一个断点<br />
运行代码，程序会自动在pdb.set_trace()暂停并进入pdb调试环境，可以用命令p查看变量，或者用命令c继续运行<br />
不需要以pdb当时运行程序 直接<code class="language-plaintext highlighter-rouge">python err.py</code>就行<br /></p>
  </li>
  <li>IDE<br />
使用IDE打断点进行调试<br /></li>
</ol>

:ET