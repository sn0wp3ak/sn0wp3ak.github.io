I"R<p>属性分类:</p>
<ul>
  <li>私有属性</li>
  <li>类属性</li>
  <li>实例属性</li>
</ul>

<p>方法分类:</p>
<ul>
  <li>私有方法</li>
  <li>类方法</li>
  <li>实例方法</li>
  <li>静态方法</li>
</ul>

<h3 id="私有">私有</h3>
<ul>
  <li>私有属性: 只能在类的内部使用, 不能在类的外部使用<br /></li>
  <li>私有方法: 不能在子类中使用, 不会被继承<br /></li>
</ul>

<p>如果想在类的外部获取私有属性的值, 则需要在类的内部定义一个公有方法, 然后在类的外部去调用这个公有方法来访问私有属性<br /></p>

<p>定义私有: 前缀加2个下划线 <code class="language-plaintext highlighter-rouge">__attr</code>或<code class="language-plaintext highlighter-rouge">__func()</code><br /></p>

<p>Python中的私有其实是<code class="language-plaintext highlighter-rouge">伪私有</code>, 还是可以在类的外部强行修改私有:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__类名__属性名</code></li>
  <li><code class="language-plaintext highlighter-rouge">__类名__方法名()</code></li>
</ul>

<h3 id="查看方法和属性">查看方法和属性</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 查看类中的方法和属性
</span><span class="n">类名</span><span class="p">.</span><span class="n">__dict__</span>
<span class="c1"># 查看实例对象的方法和属性
</span><span class="n">对象</span><span class="p">.</span><span class="n">__dict__</span>
</code></pre></div></div>
<ul>
  <li><code class="language-plaintext highlighter-rouge">__dict__</code>方法的返回值是字典</li>
</ul>

<h3 id="类">类</h3>
<ul>
  <li>类属性
    <blockquote>
      <ol>
        <li>描述的是整个类的特点</li>
        <li>在类的内部, 方法的外部的属性</li>
        <li>只会在类对象中保存, 只占一份内存</li>
      </ol>

      <p>类属性的操作:</p>
      <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 修改类属性
</span><span class="n">类名</span><span class="p">.</span><span class="n">类属性名</span> <span class="o">=</span> <span class="n">数据值</span>
<span class="c1"># 访问类属性
</span><span class="n">类名</span><span class="p">.</span><span class="n">类属性名</span>
<span class="n">对象</span><span class="p">.</span><span class="n">类属性名</span>
</code></pre></div>      </div>
      <ul>
        <li><code class="language-plaintext highlighter-rouge">对象.类属性名 = 数据值</code>并不能修改类属性的值, 而是相当于给实例对象新增了一个与类属性同名的实例属性</li>
        <li>当实例属性和类属性重名时, 对象调用的是自己的实例属性</li>
        <li>什么时候需要类属性? 每个实例对象都需要一个相同的属性值时, 定义类属性更高效</li>
      </ul>
    </blockquote>
  </li>
  <li>类方法
    <blockquote>
      <ol>
        <li>使用<code class="language-plaintext highlighter-rouge">@classmethod</code>装饰</li>
        <li>第一个形参是<code class="language-plaintext highlighter-rouge">cls</code>, 代表类本身</li>
        <li>在方法的内部不需要实例对象的属性, 只需要类属性的时候, 可以把方法定义成类方法</li>
      </ol>

      <ul>
        <li>调用类方法</li>
      </ul>
    </blockquote>
  </li>
</ul>

<h3 id="实例">实例</h3>
<ul>
  <li>实例属性
    <ol>
      <li>描述某个具体对象的特点</li>
      <li>在方法的内部, 用<code class="language-plaintext highlighter-rouge">self.属性名</code>定义</li>
      <li>在类的外部, 用<code class="language-plaintext highlighter-rouge">对象.属性名</code>定义</li>
      <li>实例属性是每创建一个实例对象都会保存一份</li>
    </ol>
  </li>
  <li>实例方法
    <ul>
      <li>第一个形参是<code class="language-plaintext highlighter-rouge">self</code>的方法</li>
    </ul>
  </li>
</ul>

<h3 id="静态方法">静态方法</h3>
:ET