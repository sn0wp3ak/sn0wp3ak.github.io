I"~<p>在Python的类中, 方法名如果以2个下划线开头, 并且以2个下划线结尾, 那么这个方法就能成为魔法方法<br /></p>

<p>魔法方法的特点:</p>
<ul>
  <li>在满足条件时会自动调用</li>
</ul>

<h3 id="__init__方法"><code class="language-plaintext highlighter-rouge">__init__</code>方法</h3>
<ul>
  <li>调用时机: 创建对象后自动调用, 即使你的类中没有定义, 也会被调用, 只不过是空代码</li>
  <li>应用场景: 为对象添加属性, 也就是初始化对象的属性</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">cls</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="p">...):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">attr</span> <span class="o">=</span> <span class="n">value</span>
</code></pre></div></div>

<h3 id="__str__方法"><code class="language-plaintext highlighter-rouge">__str__</code>方法</h3>
<ul>
  <li>调用时机:
    <ol>
      <li>print(对象)的时候会自动调用, 如果不定义<code class="language-plaintext highlighter-rouge">__str__</code>方法则会输出对象的地址</li>
      <li>str(对象) 做类型转换的时候也会自动调用</li>
    </ol>
  </li>
  <li>应用场景
    <ul>
      <li>在用print()函数打印对象时, 不想要对象的地址, 而是想打印对象的其他信息时, 可以定义, 比如打印对象的属性值</li>
    </ul>
  </li>
</ul>

<p>注意: <code class="language-plaintext highlighter-rouge">__str__</code>方法必须返回一个字符串类型的值</p>

<h3 id="__del__方法"><code class="language-plaintext highlighter-rouge">__del__</code>方法</h3>
<ul>
  <li>调用时机: 对象销毁的时候(释放内存空间, 删除的时候)
    <ol>
      <li>在整个程序结束时, 所有的对象和变量都会销毁, 此时对象的<code class="language-plaintext highlighter-rouge">__del__</code>方法将被调用</li>
      <li>自己手动删除对象, 对象的引用计数为0的时候</li>
    </ol>
  </li>
  <li>应用场景: 垃圾回收, 清理资源</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">Dog</span><span class="p">()</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
<span class="n">c</span> <span class="o">=</span> <span class="n">a</span>
<span class="k">del</span> <span class="n">a</span>
<span class="k">del</span> <span class="n">c</span>
<span class="k">del</span> <span class="n">b</span>  <span class="c1"># 引用计数为0, 此时调用__del__销毁对象
</span></code></pre></div></div>

:ET